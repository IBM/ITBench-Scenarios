---
- name: AWX End-to-End Cluster Management
  hosts:
    - development
  vars:
    aws_region_zones: "{{ [cluster.aws.region] | product(cluster.aws.zones) | map('join', '') | join(',') }}"
    runner_cluster_names: |
      {{
        [stack.name_prefix + "-runner"] |
        product(range(1, runners.count + 1) | map('string')) |
        map('join', '-') |
        zip_longest([], fillvalue=cluster.nodes.worker.instance_type + "-aws.k8s.local") |
        map('join', '-')
      }}
    state_store: s3://{{ cluster.state.s3_bucket_name }}
  pre_tasks:
    - name: Check for kops
      ansible.builtin.command:
        cmd: which kops
      register: system_kops_path
      changed_when: false
      tags:
        - always

    - name: Validate that kops exists
      ansible.builtin.assert:
        that: system_kops_path.stdout_lines | length > 0
        fail_msg: kops is not installed. Please install kops.
        success_msg: Using kops at {{ system_kops_path.stdout_lines[0] }}
      tags:
        - always

    - name: Check for bucket
      amazon.aws.s3_bucket_info:
        name: "{{ cluster.state.s3_bucket_name }}"
        region: "{{ cluster.aws.region }}"
      register: bucket_info
      tags:
        - always

    - name: Create bucket if it doesn't exist
      amazon.aws.s3_bucket:
        name: "{{ cluster.state.s3_bucket_name }}"
        region: "{{ cluster.aws.region }}"
        state: present
      tags:
        - create
      when:
        - bucket_info.buckets | length == 0

    - name: Validate that bucket exists
      ansible.builtin.assert:
        that: bucket_info.buckets | length > 0
        fail_msg: s3 bucket not found.
        success_msg: Found {{ cluster.state.s3_bucket_name }} bucket
      tags:
        - delete

    - name: Validate awx kops cluster count
      ansible.builtin.assert:
        that:
          - runners.count > 0
          - runners.count < 100
        fail_msg: Invalid number of kops clusters set. Must be between the range of 0 > x < 100.
        success_msg: Valid number of kops clusters configured.
      tags:
        - create

    - name: Validate control node configuration
      ansible.builtin.assert:
        that:
          - cluster.nodes.control.count > 0
          - cluster.nodes.control.count < 10
          - cluster.nodes.control.count % 2 == 1
        fail_msg: Invalid number of control nodes set. Must be an odd number between the range of 0 > x < 10.
        success_msg: Valid number of control nodes configured.
      tags:
        - create

    - name: Validate worker node configuration
      ansible.builtin.assert:
        that:
          - cluster.nodes.worker.count > 0
          - cluster.nodes.worker.count < 10
        fail_msg: Invalid number of worker nodes set. Must be between the range of 0 > x < 10.
        success_msg: Valid number of worker nodes configured.
      tags:
        - create
  tasks:
    - name: Retrieve list of clusters
      ansible.builtin.command:
        argv:
          - kops
          - get
          - clusters
          - --output
          - json
          - --state
          - "{{ state_store }}"
      register: clusters_output
      changed_when: false
      ignore_errors: true
      tags:
        - always

    - name: Parse cluster names
      ansible.builtin.set_fact:
        cluster_names: "{{ clusters_output.stdout | from_json | community.general.json_query('[*].metadata.name') }}"
      tags:
        - always
      when:
        - clusters_output.rc == 0

    - name: Set cluster list variables
      ansible.builtin.set_fact:
        create_clusters: "{{ runner_cluster_names | difference(cluster_names) }}"
        delete_clusters: "{{ cluster_names | intersect(runner_cluster_names) }}"
      tags:
        - always
      when:
        - clusters_output.rc == 0

    - name: Set cluster list variables (no clusters found)
      ansible.builtin.set_fact:
        create_clusters: "{{ runner_cluster_names }}"
        delete_clusters: []
      tags:
        - always
      when:
        - clusters_output.rc != 0

    - name: Create VPC for KOps clusters
      amazon.aws.ec2_vpc_net:
        name: "{{ stack.name_prefix }}-vpc"
        cidr_block: "{{ runners.aws.vpc.cidr }}"
        region: "{{ cluster.aws.region }}"
        state: present
      register: vpc_info
      tags:
        - create

    - name: Create an Internet Gateway associated with VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ cluster.aws.region }}"
        state: present
      register: igw_info
      tags:
        - create

    - name: Create a subnet for each cluster
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_info.vpc.id }}"
        cidr: "{{ runners.aws.subnet.public_base }}.{{ item * 2 }}.0/23"
        az: "{{ cluster.aws.region }}a"
        region: "{{ cluster.aws.region }}"
        map_public: true
        state: present
        tags:
          Name: "{{ stack.name_prefix }}-public-subnet-{{ item }}"
          Environment: k8s
          ManagedBy: ansible
      loop: "{{ range(1, runners.count + 1) }}"
      register: public_subnets
      tags:
        - create

    - name: Parse subnet ids
      ansible.builtin.set_fact:
        subnet_ids: "{{ public_subnets.results | community.general.json_query('[*].subnet.id') }}"
      tags:
        - create

    - name: Create a route table for public subnets
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_info.vpc.id }}"
        region: "{{ cluster.aws.region }}"
        subnets: "{{ subnet_ids }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_info.gateway_id }}"
        tags:
          Name: "{{ stack.name_prefix }}-public-route-table"
          Creator: "ansible"
        state: present
      tags:
        - create

    - name: Asynchronously create KOps clusters
      ansible.builtin.command:
        argv:
          - kops
          - create
          - cluster
          - "{{ item[0] }}"
          - --cloud
          - aws
          - --topology
          - public
          - --network-id
          - "{{ vpc_info.vpc.id }}"
          - --subnets
          - "{{ item[1] }}"
          - --zones
          - "{{ aws_region_zones }}"
          - --ssh-public-key
          - "{{ cluster.ssh.public_key_path }}"
          - --control-plane-size
          - "{{ cluster.nodes.control.instance_type }}"
          - --control-plane-count
          - "{{ cluster.nodes.control.count }}"
          - --node-size
          - "{{ cluster.nodes.worker.instance_type }}"
          - --node-count
          - "{{ cluster.nodes.worker.count }}"
          - --networking
          - "{{ cluster.networking.mode }}"
          - --state
          - "{{ state_store }}"
      async: 600
      loop: "{{ create_clusters | zip(subnet_ids) }}"
      poll: 0
      register: async_create_results
      tags:
        - create

    - name: Wait for asynchronous operations to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_create_results.results }}"
      register: async_create_poll_results
      until: async_create_poll_results.finished
      delay: 30
      retries: 20
      tags:
        - create

    - name: Clean up ansychronous operations
      ansible.builtin.async_status:
        mode: cleanup
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_create_results.results }}"
      tags:
        - create

    - name: Asynchronously build KOps clusters
      ansible.builtin.command:
        argv:
          - kops
          - update
          - cluster
          - --name
          - "{{ item }}"
          - --state
          - "{{ state_store }}"
          - --yes
          - --internal
          - --create-kube-config=false
      async: 600
      loop: "{{ create_clusters }}"
      poll: 0
      register: async_update_results
      tags:
        - create

    - name: Wait for asynchronous operations to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_update_results.results }}"
      register: async_update_poll_results
      until: async_update_poll_results.finished
      delay: 30
      retries: 20
      tags:
        - create

    - name: Clean up ansychronous operations
      ansible.builtin.async_status:
        mode: cleanup
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_update_results.results }}"
      tags:
        - create

    - name: Export the kubeconfigs for the clusters
      ansible.builtin.command:
        argv:
          - kops
          - export
          - --name
          - "{{ item }}"
          - kubecfg
          - --admin
          - --state
          - "{{ state_store }}"
          - --kubeconfig
          - /tmp/{{ item }}.yaml
      loop: "{{ create_clusters }}"
      register: export_kops_output
      changed_when: export_kops_output.rc == 0
      tags:
        - create

    - name: Asynchronously validate KOps cluster
      ansible.builtin.command:
        argv:
          - kops
          - validate
          - cluster
          - --state
          - "{{ state_store }}"
          - --wait
          - 10m
      environment:
        KUBECONFIG: /tmp/{{ item }}.yaml
      async: 600
      loop: "{{ create_clusters }}"
      poll: 0
      register: async_validate_results
      tags:
        - create

    - name: Wait for asynchronous operations to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_validate_results.results }}"
      register: async_validate_poll_results
      until: async_validate_poll_results.finished
      delay: 60
      retries: 10
      tags:
        - create

    - name: Clean up ansychronous operations
      ansible.builtin.async_status:
        mode: cleanup
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_validate_results.results }}"
      tags:
        - create

    - name: Asynchronously delete KOps clusters
      ansible.builtin.command:
        argv:
          - kops
          - delete
          - cluster
          - --name
          - "{{ item }}"
          - --yes
          - --state
          - "{{ state_store }}"
      async: 600
      loop: "{{ delete_clusters }}"
      poll: 0
      register: async_delete_results
      tags:
        - delete

    - name: Wait for asynchronous operations to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_delete_results.results }}"
      register: async_delete_poll_results
      until: async_delete_poll_results.finished
      delay: 30
      retries: 20
      tags:
        - delete

    - name: Clean up ansychronous operations
      ansible.builtin.async_status:
        mode: cleanup
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ async_delete_results.results }}"
      tags:
        - delete

    - name: Find all route tables associated with kops clusters
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          "tag:Name": "{{ stack.name_prefix }}-public-route-table"
        region: "{{ cluster.aws.region }}"
      register: route_tables_info
      tags:
        - delete

    - name: Find all subnets associated with route tables' vpcs
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ item.vpc_id }}"
        region: "{{ cluster.aws.region }}"
      loop: "{{ route_tables_info.route_tables }}"
      register: subnet_info_list
      tags:
        - delete

    - name: Delete all associated subnets
      amazon.aws.ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ item.vpc_id }}"
        region: "{{ cluster.aws.region }}"
        cidr: "{{ item.cidr_block }}"
      loop: "{{ subnet_info_list.results | sum(attribute='subnets', start=[]) }}"
      tags:
        - delete

    - name: Delete all associated route tables
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ item.vpc_id }}"
        region: "{{ cluster.aws.region }}"
        route_table_id: "{{ item.id }}"
        lookup: id
        state: absent
      loop: "{{ route_tables_info.route_tables }}"
      tags:
        - delete

    - name: Delete all associated Internet Gateway
      amazon.aws.ec2_vpc_igw:
        state: absent
        vpc_id: "{{ item.vpc_id }}"
        region: "{{ cluster.aws.region }}"
      loop: "{{ route_tables_info.route_tables }}"
      tags:
        - delete

    - name: Delete all associated VPCs
      amazon.aws.ec2_vpc_net:
        state: absent
        vpc_id: "{{ item.vpc_id }}"
        region: "{{ cluster.aws.region }}"
      loop: "{{ route_tables_info.route_tables }}"
      tags:
        - delete
