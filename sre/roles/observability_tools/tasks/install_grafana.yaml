---
- name: Load datasources template as yaml
  ansible.builtin.set_fact:
    datasources: "{{ lookup('ansible.builtin.template', 'templates/grafana_datasources.j2') | from_yaml }}"

- name: Create Astronomy Shop dashboard map
  ansible.builtin.set_fact:
    astronomy_shop_dashboards: {}

- name: Remove OpenTelemetry Astronomy Shop tar file
  ansible.builtin.file:
    path: /tmp/opentelemetry-demo-{{ otel_astronomy_app_chart_version }}.tgz
    state: absent

- name: Remove OpenTelemetry Astronomy Shop files
  ansible.builtin.file:
    path: /tmp/opentelemetry-demo
    state: absent

- name: Retrieve OpenTelemetry Astronomy Shop dashboards
  kubernetes.core.helm_pull:
    chart_ref: opentelemetry-demo
    chart_version: "{{ otel_astronomy_app_chart_version }}"
    repo_url: https://open-telemetry.github.io/opentelemetry-helm-charts
    untar_chart: yes
    destination: /tmp

- name: Find all Grafana dashboard files
  ansible.builtin.find:
    path: /tmp/opentelemetry-demo/grafana-dashboards
    patterns: "*.json"
  register: grafana_dashboards

- name: Update Astronomy Shop dashboard map with modified Grafana dashboards
  ansible.builtin.set_fact:
    astronomy_shop_dashboards: |
      {{
          astronomy_shop_dashboards |
          combine({
              item | basename | replace("-", "_") | splitext | first: {
                "json": lookup('ansible.builtin.file', item) |
                        replace("webstore-metrics", "prometheus") |
                        replace("webstore-traces", "jaeger") |
                        replace("P9744FCCEAAFBD98F", "opensearch") |
                        from_json |
                        to_json
              }
          })
      }}
  loop: "{{ grafana_dashboards | community.general.json_query('files[*].path') }}"

- name: Create alert rules processing variables
  ansible.builtin.set_fact:
    alert_groups: []
    alert_rules_file_names:
      - cost
      - efficiency
      - general
      - golden_signal
      - kafka_consumer_connection

- name: Copy alert rules files
  ansible.builtin.copy:
    src: files/alert_rules_{{ item }}.yaml
    dest: /tmp/{{ item }}_alert_rules.yaml
  loop: "{{ alert_rules_file_names }}"

- name: Escape double curly brackets in alert rules
  ansible.builtin.replace:
    path: /tmp/{{ item }}_alert_rules.yaml
    regexp: "\\{\\{([a-zA-Z\\.$_ ]*)\\}\\}"
    replace: "\\{\\{\"\\{\\{\"\\}\\}\\1\\{\\{\"\\}\\}\"\\}\\}"
  loop: "{{ alert_rules_file_names }}"

- name: Remove double backslash from alert rules
  ansible.builtin.replace:
    path: /tmp/{{ item }}_alert_rules.yaml
    regexp: "\\\\"
    replace: ""
  loop: "{{ alert_rules_file_names }}"

- name: Load sample applications alert rules from file
  ansible.builtin.set_fact:
    golden_signal_alert_rules: "{{ lookup('ansible.builtin.file', '/tmp/golden_signal_alert_rules.yaml') | from_yaml }}"
    kafka_consumer_connection_alert_rules: "{{ lookup('ansible.builtin.file', '/tmp/kafka_consumer_connection_alert_rules.yaml') | from_yaml }}"

- name: Create sample applications alert rules list
  ansible.builtin.set_fact:
    sample_application_alert_rules: "{{ golden_signal_alert_rules + kafka_consumer_connection_alert_rules }}"

- name: Create alert groups list
  ansible.builtin.set_fact:
    alert_groups:
      - orgId: 1
        name: BenchmarkNotifications
        folder: ApplicationAlerts
        interval: 60s
        rules: "{{ sample_application_alert_rules }}"
      - orgId: 1
        name: BenchmarkNotifications
        folder: GeneralAlerts
        interval: 60s
        rules: "{{ lookup('ansible.builtin.file', '/tmp/general_alert_rules.yaml') | from_yaml }}"

- name: Create finops alert group list
  ansible.builtin.set_fact:
    finops_alert_groups:
      - orgId: 1
        name: BenchmarkNotifications
        folder: CostAlerts
        interval: 60s
        rules: "{{ lookup('ansible.builtin.file', '/tmp/cost_alert_rules.yaml') | from_yaml }}"
      - orgId: 1
        name: BenchmarkNotifications
        folder: EfficiencyAlerts
        interval: 60s
        rules: "{{ lookup('ansible.builtin.file', '/tmp/efficiency_alert_rules.yaml') | from_yaml }}"
  when:
    - tools | intersect(['opencost']) | length == 1

- name: Append finops alert groups to list
  ansible.builtin.set_fact:
    alert_groups: "{{ alert_groups + finops_alert_groups }}"
  when:
    - tools | intersect(['opencost']) | length == 1

- name: Deploy Grafana
  kubernetes.core.helm:
    name: "{{ grafana_installation_name }}"
    kubeconfig_path: "{{ kubeconfig }}"
    chart_ref: grafana/grafana
    chart_version: "{{ grafana_chart_version }}"
    release_namespace: "{{ grafana_namespace_project_name }}"
    release_state: present
    create_namespace: true
    wait: true
    timeout: 10m0s
    values:
      alerting:
        rules.yaml:
          apiVersion: 1
          groups: "{{ alert_groups }}"
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: astronomy-shop
              orgId: 1
              folder: AstronomyShop
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/astronomy-shop
                foldersFromFilesStructure: false
      dashboards:
        astronomy-shop: "{{ astronomy_shop_dashboards }}"
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources: "{{ datasources }}"
      grafana.ini:
        auth:
          disable_login_form: true
          disable_signout_menu: true
        auth.anonymous:
          enabled: true
          org_role: Admin
        server:
          root_url: "http://%(domain)s/{{ grafana_namespace_project_name }}"
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /$2
        hosts: []
        path: "/{{ grafana_namespace_project_name }}(/|$)(.*)"
        pathType: ImplementationSpecific
      plugins:
        - grafana-opensearch-datasource
        - vertamedia-clickhouse-datasource
