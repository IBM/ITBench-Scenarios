---
- name: Document this fault injection
  set_fact:
    injection_docs: "{{ injection_docs | default([]) + [curr_docs] }}"
  vars:
    curr_docs:
      name: "Chaos CPU Stress"
      author: "@divyapathak24"
      description: "Generate artificial load to hog CPU cycles."
      fault_type: "ChaosMesh"
      required_fields:
        - "chaos_mesh_namespace_project_name"
        - "deployment_info.result.spec.template.spec.containers[0].name"
        - "otel_astronomy_app_namespace_project_name"
        - "target_deployment_name"
        - "target_label_name1"
        - "target_namespace_name"
  tags:
    - injection_docs

- name: Get current deployment
  kubernetes.core.k8s:
    api_version: apps/v1
    kind: Deployment
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ otel_astronomy_app_namespace_project_name }}"
    name: "{{ target_deployment_name }}"
  register: deployment_info
  when: is_cpu_stress_chaos

- name: Create a new variable with the name to get the service first name
  debug:
    var: deployment_info
  when: is_cpu_stress_chaos

- name: Update CPU limit variables of Kubernetes deployment
  kubernetes.core.k8s_json_patch:
    kind: Deployment
    kubeconfig: "{{ kubeconfig }}"
    name: "{{ target_deployment_name }}"
    namespace: "{{ otel_astronomy_app_namespace_project_name }}"
    patch:
      - op: replace
        path: "/spec/template/spec/containers/0/resources/requests/cpu"
        value: "2m"
      - op: replace
        path: "/spec/template/spec/containers/0/resources/limits/cpu"
        value: "2m"
    wait: true
  register: deployment_update_result
  when:
    - is_cpu_stress_chaos
    - is_fault_injection
    - deployment_info.result is defined
    - deployment_info.result.spec.template.spec.containers | length > 0
    - deployment_info.result.spec.template.spec.containers[0].resources.requests.cpu is defined

- name: Inject CPU stress chaos leveraging the Chaos framework
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    definition:
      apiVersion: chaos-mesh.org/v1alpha1
      kind: Schedule
      metadata:
        name: "schedule-cpustress-{{ target_namespace_name }}-{{ target_deployment_name }}"
        namespace: "{{ tools_helm_releases.chaos_mesh.namespace }}"
      spec:
        schedule: "* * * * *" # scheduled to run every minute
        historyLimit: 1
        concurrencyPolicy: "Forbid"
        type: "StressChaos"
        stressChaos:
          mode: all
          selector:
            namespaces:
              - "{{ otel_astronomy_app_namespace_project_name }}"
            labelSelectors:
              "app.kubernetes.io/component": "{{target_label_name1}}"
          stressors:
            cpu:
              workers: 30
              load: 100
          duration: "55s"
  register: fault_injection_status
  tags: chaos_mesh
  when: is_cpu_stress_chaos and is_fault_injection

- name: Remove CPU stress chaos leveraging the Chaos framework
  kubernetes.core.k8s:
    state: absent
    kubeconfig: "{{ kubeconfig }}"
    definition:
      apiVersion: chaos-mesh.org/v1alpha1
      kind: Schedule
      metadata:
        name: "schedule-cpustress-{{ target_namespace_name }}-{{ target_deployment_name }}"
        namespace: "{{ tools_helm_releases.chaos_mesh.namespace }}"
  register: fault_removal_status
  tags: chaos_mesh
  when: is_cpu_stress_chaos and is_fault_removal

- name: Update CPU limit variables of Kubernetes deployment
  kubernetes.core.k8s_json_patch:
    kind: Deployment
    kubeconfig: "{{ kubeconfig }}"
    name: "{{ target_deployment_name }}"
    namespace: "{{ otel_astronomy_app_namespace_project_name }}"
    patch:
      - op: replace
        path: "/spec/template/spec/containers/0/resources/requests/cpu"
        value: "50m"
      - op: remove
        path: "/spec/template/spec/containers/0/resources/limits/cpu"
    wait: true
  register: deployment_update_result
  when:
    - is_cpu_stress_chaos
    - is_fault_removal
    - deployment_info.result is defined
    - deployment_info.result.spec.template.spec.containers | length > 0
    - deployment_info.result.spec.template.spec.containers[0].resources.limits.cpu is defined
