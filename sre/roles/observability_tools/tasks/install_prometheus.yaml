---
- name: Copy alerting rules template into tmp directory for processing
  ansible.builtin.copy:
    src: templates/prometheus-alerting-rules.j2
    dest: /tmp/prometheus-alerting-rules.j2

- name: Create a temporary template with fake curly brackets for processing
  ansible.builtin.replace:
    path: /tmp/prometheus-alerting-rules.j2
    regexp: "\\{\\{([a-zA-Z\\.$_ ]*)\\}\\}"
    replace: "<<\\1>>"

- name: Create new alerting rules template from proccesed template
  ansible.builtin.copy:
    dest: /tmp/prometheus-required-alerting-rules.j2
    content: "{{ lookup('ansible.builtin.template', '/tmp/prometheus-alerting-rules.j2') }}"

- name: Escape double curly brackets in alerting rules yaml file
  ansible.builtin.replace:
    path: /tmp/prometheus-required-alerting-rules.j2
    regexp: "<<([a-zA-Z\\.$_ ]*)>>"
    replace: "\\{\\{\"\\{\\{\"\\}\\}\\1\\{\\{\"\\}\\}\"\\}\\}"

- name: Remove double backslash in alerting rules yaml file
  ansible.builtin.replace:
    path: /tmp/prometheus-required-alerting-rules.j2
    regexp: "\\\\"
    replace: ""

- name: Install Prometheus Operator and Prometheus
  kubernetes.core.helm:
    chart_ref: kube-prometheus-stack
    chart_repo_url: https://prometheus-community.github.io/helm-charts
    chart_version: 72.3.0
    kubeconfig: "{{ kubeconfig }}"
    release_name: "{{ helm_release.name }}"
    release_namespace: "{{ helm_release.namespace }}"
    release_state: present
    timeout: 10m0s
    values:
      additionalPrometheusRulesMap:
        "incident-alerts": "{{ lookup('ansible.builtin.template', '/tmp/prometheus-required-alerting-rules.j2') | from_yaml }}"
        "incident-rules": "{{ lookup('ansible.builtin.template', 'templates/prometheus-recording-rules.j2') | from_yaml }}"
      grafana:
        enabled: false
      prometheus:
        prometheusSpec:
          serviceMonitorSelectorNilUsesHelmValues: false
          serviceMonitorNamespaceSelector:
            matchLabels:
              it-bench/monitoring: "true"
    wait: true
  when:
    - observability_tools_cluster.platform == "kubernetes"
