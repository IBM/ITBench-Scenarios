---
- name: Create datasource processing variables
  ansible.builtin.set_fact:
    datasources: []

- name: Convert datasource templates to yaml
  ansible.builtin.template:
    src: templates/datasource_{{ item }}.j2
    dest: /tmp/datasource_{{ item }}.yaml
  loop:
    - clickhouse
    - jaeger
    - opensearch
    - prometheus

- name: Load datasources from files
  ansible.builtin.set_fact:
    clickhouse_datasources: "{{ lookup('ansible.builtin.file', '/tmp/datasource_clickhouse.yaml') | from_yaml }}"
    jaeger_datasources: "{{ lookup('ansible.builtin.file', '/tmp/datasource_jaeger.yaml') | from_yaml }}"
    opensearch_datasources: "{{ lookup('ansible.builtin.file', '/tmp/datasource_opensearch.yaml') | from_yaml }}"
    prometheus_datasources: "{{ lookup('ansible.builtin.file', '/tmp/datasource_prometheus.yaml') | from_yaml }}"

- name: Append Prometheus datasource to list
  ansible.builtin.set_fact:
    datasources: "{{ datasources + prometheus_datasources }}"

- name: Append Jaeger datasource to list
  ansible.builtin.set_fact:
    datasources: "{{ datasources + jaeger_datasources }}"
  when:
    - enable_jaeger_query_endpoint

- name: Append Clickhouse datasource to list
  ansible.builtin.set_fact:
    datasources: "{{ datasources + clickhouse_datasources }}"

- name: Append Opensearch datasource to list
  ansible.builtin.set_fact:
    datasources: "{{ datasources + opensearch_datasources }}"

- name: Create dashboard processing variables
  ansible.builtin.set_fact:
    dashboard_file_names:
      - demo-dashboard
      - opentelemetry-collector
      - opentelemetry-collector-data-flow
      - spanmetrics-dashboard
    dashboard_uid_replacements:
      - replace: webstore-metrics
        with: prometheus
      - replace: webstore-traces
        with: jaeger
      - replace: P9744FCCEAAFBD98F
        with: opensearch

- name: Download OpenTelemtry Demo dashboards
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/open-telemetry/opentelemetry-helm-charts/refs/tags/opentelemetry-demo-{{ otel_astronomy_app_chart_version }}/charts/opentelemetry-demo/grafana-dashboards/{{ item }}.json
    dest: /tmp/{{ item }}.json
    mode: '0600'
  loop: "{{ dashboard_file_names }}"

- name: Replace dashboards' datasource uid
  ansible.builtin.replace:
    path:  /tmp/{{ item[0] }}.json
    regexp: "{{ item[1].replace }}"
    replace: "{{ item[1].with }}"
  loop: "{{ dashboard_file_names | product(dashboard_uid_replacements) | list }}"

- name: Create alert rules processing variables
  ansible.builtin.set_fact:
    alert_groups: []
    alert_rules_file_names:
      - cost
      - efficiency
      - general
      - golden_signal
      - kafka_consumer_connection

- name: Copy alert rules files
  ansible.builtin.copy:
    src: files/alert_rules_{{ item }}.yaml
    dest: /tmp/{{ item }}_alert_rules.yaml
  loop: "{{ alert_rules_file_names }}"

- name: Escape double curly brackets in alert rules
  ansible.builtin.replace:
    path: /tmp/{{ item }}_alert_rules.yaml
    regexp: "\\{\\{([a-zA-Z\\.$_ ]*)\\}\\}"
    replace: "\\{\\{\"\\{\\{\"\\}\\}\\1\\{\\{\"\\}\\}\"\\}\\}"
  loop: "{{ alert_rules_file_names }}"

- name: Remove double backslash from alert rules
  ansible.builtin.replace:
    path: /tmp/{{ item }}_alert_rules.yaml
    regexp: "\\\\"
    replace: ""
  loop: "{{ alert_rules_file_names }}"

- name: Load sample applications alert rules from file
  ansible.builtin.set_fact:
    golden_signal_alert_rules: "{{ lookup('ansible.builtin.file', '/tmp/golden_signal_alert_rules.yaml') | from_yaml }}"
    kafka_consumer_connection_alert_rules: "{{ lookup('ansible.builtin.file', '/tmp/kafka_consumer_connection_alert_rules.yaml') | from_yaml }}"

- name: Create sample applications alert rules list
  ansible.builtin.set_fact:
    sample_application_alert_rules: "{{ golden_signal_alert_rules + kafka_consumer_connection_alert_rules }}"

- name: Create alert groups list
  ansible.builtin.set_fact:
    alert_groups:
      - orgId: 1
        name: BenchmarkNotifications
        folder: ApplicationAlerts
        interval: 60s
        rules: "{{ sample_application_alert_rules }}"
      - orgId: 1
        name: BenchmarkNotifications
        folder: GeneralAlerts
        interval: 60s
        rules: "{{ lookup('ansible.builtin.file', '/tmp/general_alert_rules.yaml') | from_yaml }}"

- name: Create finops alert group list
  ansible.builtin.set_fact:
    finops_alert_groups:
      - orgId: 1
        name: BenchmarkNotifications
        folder: CostAlerts
        interval: 60s
        rules: "{{ lookup('ansible.builtin.file', '/tmp/cost_alert_rules.yaml') | from_yaml }}"
      - orgId: 1
        name: BenchmarkNotifications
        folder: EfficiencyAlerts
        interval: 60s
        rules: "{{ lookup('ansible.builtin.file', '/tmp/efficiency_alert_rules.yaml') | from_yaml }}"
  when:
    - domain == "finops"

- name: Append finops alert groups to list
  ansible.builtin.set_fact:
    alert_groups: "{{ alert_groups + finops_alert_groups }}"
  when:
    - domain == "finops"

- name: Deploy Grafana
  kubernetes.core.helm:
    name: "{{ grafana_installation_name }}"
    kubeconfig_path: "{{ kubeconfig }}"
    chart_ref: grafana/grafana
    chart_version: "{{ grafana_chart_version }}"
    release_namespace: "{{ grafana_namespace_project_name }}"
    release_state: present
    create_namespace: true
    wait: true
    timeout: 10m0s
    values:
      alerting:
        rules.yaml:
          apiVersion: 1
          groups: "{{ alert_groups }}"
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: astronomy-shop
              orgId: 1
              folder: AstronomyShop
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/astronomy-shop
                foldersFromFilesStructure: false
      dashboards:
        astronomy-shop:
          demo:
            json: "{{ lookup('ansible.builtin.file','/tmp/demo-dashboard.json') | from_json | to_json }}"
          opentelemetry_collector:
            json: "{{ lookup('ansible.builtin.file','/tmp/opentelemetry-collector.json') | from_json | to_json }}"
          opentelemetry_collector_data_flow:
            json: "{{ lookup('ansible.builtin.file','/tmp/opentelemetry-collector-data-flow.json') | from_json | to_json }}"
          spanmetrics:
            json: "{{ lookup('ansible.builtin.file','/tmp/spanmetrics-dashboard.json') | from_json | to_json }}"
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources: "{{ datasources }}"
      grafana.ini:
        auth:
          disable_login_form: true
          disable_signout_menu: true
        auth.anonymous:
          enabled: true
          org_role: Admin
        server:
          root_url: "http://%(domain)s/{{ grafana_namespace_project_name }}"
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /$2
        hosts: []
        path: "/{{ grafana_namespace_project_name }}(/|$)(.*)"
        pathType: ImplementationSpecific
      plugins:
        - grafana-opensearch-datasource
        - vertamedia-clickhouse-datasource
