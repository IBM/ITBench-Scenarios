---
- name: Check for kops
  ansible.builtin.command:
    cmd: which kops
  register: system_kops_path
  changed_when: false

- name: Validate that kops exists
  ansible.builtin.assert:
    that: system_kops_path.stdout_lines | length > 0
    fail_msg: kops is not installed. Please install kops.
    success_msg: Using kops at {{ system_kops_path.stdout_lines[0] }}

- name: Check kops version
  ansible.builtin.command:
    cmd: "{{ system_kops_path.stdout_lines[0] }} version --short"
  register: raw_kops_version
  changed_when: false

- name: Parse kops verion
  ansible.builtin.set_fact:
    system_kops_version: "{{ raw_kops_version.stdout }}"

- name: Validate the kops version
  ansible.builtin.assert:
    that: "'1.31' is version_compare(system_kops_version, '<=')"
    fail_msg: "KOps version for system {{ system_kops_version }} must be at least 1.31 or later."
    success_msg: "KOps version {{ system_kops_version }} (>= 1.31) is OK."

- name: Gather all regions
  amazon.aws.aws_region_info:
  register: region_info

- name: Parse region names
  ansible.builtin.set_fact:
    regions: "{{ region_info.regions | community.general.json_query('[*].region_name') }}"

- name: Validate that region exists
  ansible.builtin.assert:
    that: kops_cluster.aws.region in regions
    fail_msg: 'Invalid region. Please select from region: {{ regions }}'
    success_msg: AWS region validated.

- name: Gather available zones in the region
  amazon.aws.aws_az_info:
    region: "{{ kops_cluster.aws.region }}"
    filters:
      state: available
  register: availability_zone_info

- name: Parse zone names
  ansible.builtin.set_fact:
    available_zones: "{{ availability_zone_info.availability_zones | community.general.json_query('[*].zone_name') }}"

- name: Validate that zones are available
  ansible.builtin.assert:
    that: kops_cluster.aws.zones | difference(available_zones) | length == 0
    fail_msg: 'At least one zone is not available. Please select from available zones: {{ available_zones }}'
    success_msg: All zones in region are available.

- name: Validate control node configuration
  ansible.builtin.assert:
    that:
      - kops_cluster.nodes.control.count > 0
      - kops_cluster.nodes.control.count < 10
      - kops_cluster.nodes.control.count % 2 == 1
    fail_msg: Invalid number of control nodes set. Must be an odd number between the range of 0 > x < 10.
    success_msg: Valid number of control nodes configured.

- name: Validate worker node configuration
  ansible.builtin.assert:
    that:
      - kops_cluster.nodes.worker.count > 0
      - kops_cluster.nodes.worker.count < 10
    fail_msg: Invalid number of worker nodes set. Must be between the range of 0 > x < 10.
    success_msg: Valid number of worker nodes configured.

- name: Validate if the bucket exists (when listing clusters)
  amazon.aws.s3_bucket_info:
    name: "{{ cluster.s3.bucket_name }}"
    region: "{{ cluster.aws.region }}"
  register: bucket_info

- name: Assert bucket exists
  ansible.builtin.assert:
    that:
      - cluster.s3.bucket_name in (bucket_info.buckets | map(attribute='name') | list)
    fail_msg: "S3 bucket '{{ cluster.s3.bucket_name }}' does not exist. Please check the value associated with cluster.s3.bucket_name at group_vars/development/kops_cluster.yaml."
    success_msg: "S3 bucket '{{ cluster.s3.bucket_name }}' exists."

- name: Check if the public SSH key file path is set (on creating clusters)
  ansible.builtin.stat:
    path: "{{ cluster.ssh.public_key_path }}"
  register: ssh_public_key_file_path

- name: Check if the private SSH key file path is valid
  ansible.builtin.assert:
    that:
      - ssh_public_key_file_path.stat.exists
      - ssh_public_key_file_path.stat.isreg
      - ssh_public_key_file_path.stat.size > 0
    fail_msg: "Public SSH key file path is missing. Please check the value associated with cluster.ssh.public_key_path at group_vars/development/kops_cluster.yaml."
    success_msg: "Public SSH key file path is set."
